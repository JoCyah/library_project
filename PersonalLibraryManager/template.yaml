#AWS SAM Template for Personal Library Manager Application
#This template deploys a serverless application that includes an API Gateway, Lambda functions,
#DynamoDB tables for storing book and user data, and the S3 bucket for storing book cover images.


AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
  # DynamoDB Table for Books
  BooksTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'Books'
      AttributeDefinitions:
        - AttributeName: 'book_id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'book_id'
          KeyType: 'HASH'
      BillingMode: 'PAY_PER_REQUEST'
  
  # DynamoDB Table for Users
  UsersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'Users'
      AttributeDefinitions:
        - AttributeName: 'user_id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'user_id'
          KeyType: 'HASH'
      BillingMode: 'PAY_PER_REQUEST'

  # S3 Bucket for storing book cover images
  LibraryImagesBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'personal-library-images'

  # Lambda Function to add a book
  AddBookFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'add_book.lambda_handler'
      Runtime: 'python3.12'
      CodeUri: './src'
      MemorySize: 128
      Timeout: 10
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
        - AWSLambdaExecute
      Environment:
        Variables:
          BOOKS_TABLE: !Ref BooksTable

  # Lambda Function to get a book
  GetBookFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'get_book.lambda_handler'
      Runtime: 'python3.12'
      CodeUri: './src'
      MemorySize: 128
      Timeout: 10
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
        - AWSLambdaExecute
      Environment:
        Variables:
          BOOKS_TABLE: !Ref BooksTable

  # Lambda Function to update a book
  UpdateBookFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'update_book.lambda_handler'
      Runtime: 'python3.12'
      CodeUri: './src'
      MemorySize: 128
      Timeout: 10
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
        - AWSLambdaExecute
      Environment:
        Variables:
          BOOKS_TABLE: !Ref BooksTable

  # Lambda Function to delete a book
  DeleteBookFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'delete_book.lambda_handler'
      Runtime: 'python3.12'
      CodeUri: './src'
      MemorySize: 128
      Timeout: 10
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
        - AWSLambdaExecute
      Environment:
        Variables:
          BOOKS_TABLE: !Ref BooksTable

  # API Gateway to expose the Lambda functions as REST API endpoints
  ApiGateway:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: 'LibraryAPI'
      StageName: 'dev'
      DefinitionBody:
        swagger: '2.0'
        info:
          title: 'LibraryAPI'
          version: '1.0'
        paths:
          /books:
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddBookFunction.Arn}/invocations'
                httpMethod: 'POST'
                type: 'aws_proxy'
            get:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetBookFunction.Arn}/invocations'
                httpMethod: 'GET'
                type: 'aws_proxy'
            put:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateBookFunction.Arn}/invocations'
                httpMethod: 'PUT'
                type: 'aws_proxy'
            delete:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteBookFunction.Arn}/invocations'
                httpMethod: 'DELETE'
                type: 'aws_proxy'
